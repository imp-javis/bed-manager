# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'waitinglist.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import regform
from amu_database import getListSize, deletePatfromWaitlist, updatePWTR, updatecolour, getPatientInfo, getPatientinWaitlist, updateCC
from PyQt5.QtCore import QTimer, QTime, Qt
import time


class Ui_waitlist(object):
    def back(self, waitlist, user, phototag, pos):
        from monitor import Ui_MainWindow2 # function is imported here to prevent runtime callback (circular import)
        self.window = QtWidgets.QMainWindow()
        self.ui = Ui_MainWindow2()
        self.ui.setupUi(self.window, user, phototag, pos)
        self.window.show()
        waitlist.close()

    def addPatient(self, waitlist):
        self.window = QtWidgets.QGroupBox()
        self.ui = regform.Ui_registerform()
        self.ui.setupUi(self.window, waitlist)
        self.window.show()
    
    def timing(self, seconds):
        mins, secs = divmod(seconds, 60)
        hours, minutes = divmod(mins, 60)
        return int(hours), int(minutes), int(secs)

    def getTimeElapsed(self):           # do we need variable row in this function??--------------------------------------------------------
        row= 0 
        listnow= getPatientinWaitlist() # get the waitlist in the database as a list
        green= 0
        yellow= 0
        red= 0
        black= 0
        # blacktime=0
        for patient in listnow: #looping through each row of waitlist and add it to the table {first, last, age, gender, diag
            timenow= time.time()
            t= QtWidgets.QLabel()
            c= QtWidgets.QLabel()
            timeelapsing= timenow-patient[3] # get time of each patient
            hours, mins, secs= self.timing(timeelapsing)
            timeelapsed= '{:02d}:{:02d}:{:02d}'.format(hours, mins, secs)
            # t.setText(timeelapsed)
            # brush = QtGui.QBrush(QtGui.QColor(33, 255, 6)) # set background to green
            # brush = QtGui.QBrush(QtGui.QColor(255, 255, 10)) # set background to yellow

            if hours < 2:
                green= green+1
                brush = QtGui.QBrush(QtGui.QColor(33, 255, 6)) # set background to green
                brush.setStyle(QtCore.Qt.SolidPattern)
            elif hours < 3:
                yellow= yellow+1
                brush = QtGui.QBrush(QtGui.QColor(255, 255, 10)) # set background to yellow
                brush.setStyle(QtCore.Qt.SolidPattern)
            elif hours < 4:
                red= red+1
                brush = QtGui.QBrush(QtGui.QColor(252, 1, 7)) # set background to red
                brush.setStyle(QtCore.Qt.SolidPattern)
            elif hours >= 4:
                black = black+1
                brush = QtGui.QBrush(QtGui.QColor(0, 0, 0)) # set background to black
                brush.setStyle(QtCore.Qt.SolidPattern)
            
            # if timeelapsing>blacktime:
            #     toBlack(timeelapsing)
            # elif timeelapsing<blacktime:
            #     pass
            # elif timeelapsing> 14400:
            #     toBlack(0)

            item = QtWidgets.QTableWidgetItem()
            item.setTextAlignment(QtCore.Qt.AlignCenter)
            item.setText(timeelapsed)
            self.tableWidget.setItem(row, 8, item)
            item = QtWidgets.QTableWidgetItem()
            item.setBackground(brush)
            self.tableWidget.setItem(row, 0, item)

            row= row+1

        updatecolour(green, yellow, red, black)    # insert waiting list timer status into database
    
    def displayList(self):
        size= getListSize() # from here, this is the function to update the waitlist from registrations saved in the database
        self.tableWidget.setRowCount(size) #setting the table row size
        row= 0 

        listnow= getPatientinWaitlist() # get the waitlist in the database as a list
        for waitlistPat in listnow: #looping through each row of waitlist and add it to the table {first, last, age, gender, diagnosis, time, isolate}
            patient = getPatientInfo(waitlistPat[0])
            checkBox_isolate = QtWidgets.QTableWidgetItem()
            checkBox_isolate.setCheckState(patient[6])

            checkBox_cc = QtWidgets.QTableWidgetItem()
            checkBox_cc.setCheckState(waitlistPat[1])

            checkBox_pwtr = QtWidgets.QTableWidgetItem()
            checkBox_pwtr.setCheckState(waitlistPat[2])
            
            self.tableWidget.setRowHeight(row, 70)
            item = QtWidgets.QTableWidgetItem()
            item.setTextAlignment(QtCore.Qt.AlignCenter)
            item.setText(str(patient[0])) 
            self.tableWidget.setItem(row, 1, item) #id
            self.tableWidget.setItem(row, 2, QtWidgets.QTableWidgetItem("{} {}".format(patient[1], patient[2]))) # name
            self.tableWidget.setItem(row, 3, QtWidgets.QTableWidgetItem(("Age: {} \nGender: {}").format(patient[3],patient[4]))) #age and gender
            self.tableWidget.setItem(row, 4, checkBox_isolate)
            self.tableWidget.setItem(row, 5, QtWidgets.QTableWidgetItem(patient[5])) #diagnosis
            self.tableWidget.setItem(row, 6, checkBox_cc)
            self.tableWidget.setItem(row, 7, checkBox_pwtr)

            row = row+1

        self.tableWidget.itemClicked.connect(self.updatecheck)

    def updatecheck(self, item):
        col= self.tableWidget.column(item)

        if col == 6:
            row= self.tableWidget.row(item)
            state=item.checkState()
            sel_id= self.tableWidget.item(row, 1).text()
            updateCC(sel_id, state)
        
        elif col == 7:
            row= self.tableWidget.row(item)
            state=item.checkState()
            sel_id= self.tableWidget.item(row, 1).text()
            updatePWTR(sel_id, state)
            
        else: 
            pass
    

    def deletePatient(self):
        currow= self.tableWidget.currentRow()
        id = self.tableWidget.item(currow, 1).text()
        deletePatfromWaitlist(id)
        self.displayList()

    def setupUi(self, waitlist, user, phototag, pos):
        waitlist.setObjectName("waitlist")
        self.user= user
        self.phototag = phototag
        self.pos= pos
        # waitlist.resize(800, 600)
        # self.setWindowState(QtCore.Qt.WindowMaximized)
        waitlist.showMaximized()
        self.centralwidget = QtWidgets.QWidget(waitlist)
        self.centralwidget.setObjectName("centralwidget")
        self.newpatient = QtWidgets.QPushButton(self.centralwidget, clicked= lambda: self.addPatient(waitlist))
        self.newpatient.setGeometry(QtCore.QRect(1250, 30, 131, 32))
        self.newpatient.setObjectName("newpatient")
        self.delpatient = QtWidgets.QPushButton(self.centralwidget, clicked= lambda: self.deletePatient())
        self.delpatient.setGeometry(QtCore.QRect(1130, 30, 113, 32))
        self.delpatient.setObjectName("delpatient")
        self.backButton = QtWidgets.QPushButton(self.centralwidget, clicked= lambda: self.back(waitlist, self.user, self.phototag, self.pos))
        self.backButton.setGeometry(QtCore.QRect(20, 30, 71, 32))
        self.backButton.setObjectName("backButton")
        self.title = QtWidgets.QLabel(self.centralwidget)
        self.title.setGeometry(QtCore.QRect(630, 10, 231, 61))
        self.title.setStyleSheet("font: 40pt \"Times\";")
        self.title.setObjectName("title")
        self.tableWidget = QtWidgets.QTableWidget(self.centralwidget)
        self.tableWidget.setGeometry(QtCore.QRect(30, 90, 1361, 671))
        self.tableWidget.setWordWrap(True)
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(9)
        self.tableWidget.setRowCount(1)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        self.tableWidget.setVerticalHeaderItem(0, item)

        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(5, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(6, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(7, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(8, item)

        self.tableWidget.setColumnWidth(0,125) #status
        self.tableWidget.setColumnWidth(1,65) #id
        self.tableWidget.setColumnWidth(2,200) #last name
        self.tableWidget.setColumnWidth(3,120) #details
        self.tableWidget.setColumnWidth(4,51) #isolation
        self.tableWidget.setColumnWidth(5,545) #diagnosis
        self.tableWidget.setColumnWidth(6,73) #clerk check
        self.tableWidget.setColumnWidth(7,75) #pwtr check
        self.tableWidget.setColumnWidth(8,100) #timer
        self.tableWidget.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers) # does not allow editing to the table
        self.displayList()

        # create timer
        self.timer= QTimer()
        self.timer.timeout.connect(self.getTimeElapsed)

        #start timer and update every second
        self.timer.start(1000)

        #call the function
        self.getTimeElapsed()

        waitlist.setCentralWidget(self.centralwidget)
        self.retranslateUi(waitlist)
        QtCore.QMetaObject.connectSlotsByName(waitlist)


    def retranslateUi(self, waitlist):
        _translate = QtCore.QCoreApplication.translate
        waitlist.setWindowTitle(_translate("waitlist", "Waiting List"))
        self.newpatient.setText(_translate("waitlist", "Add New Patient"))
        self.title.setText(_translate("waitlist", "Waiting List"))
        item = self.tableWidget.horizontalHeaderItem(0)
        item.setText(_translate("waitlist", "Status"))
        item = self.tableWidget.horizontalHeaderItem(1)
        item.setText(_translate("waitlist", "Patient ID"))
        item = self.tableWidget.horizontalHeaderItem(2)
        item.setText(_translate("waitlist", "Name"))
        item = self.tableWidget.horizontalHeaderItem(3)
        item.setText(_translate("waitlist", "Details"))
        item = self.tableWidget.horizontalHeaderItem(4)
        item.setText(_translate("waitlist", "Isolation"))
        item = self.tableWidget.horizontalHeaderItem(5)
        item.setText(_translate("waitlist", "Diagnosis"))
        item = self.tableWidget.horizontalHeaderItem(6)
        item.setText(_translate("waitlist", "Clerk Check"))
        item = self.tableWidget.horizontalHeaderItem(7)
        item.setText(_translate("waitlist", "PWTR Check"))
        item = self.tableWidget.horizontalHeaderItem(8)
        item.setText(_translate("waitlist", "Timer"))
        self.delpatient.setText(_translate("waitlist", "Delete Patient"))
        self.backButton.setText(_translate("waitlist", "Back"))
        


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    waitlist = QtWidgets.QMainWindow()
    ui = Ui_waitlist()
    ui.setupUi(waitlist)
    waitlist.show()
    
    sys.exit(app.exec_())
